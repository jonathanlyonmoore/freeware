#ifndef lint
/*static char yysccsid[] = "from: @(#)yaccpar	1.9 (Berkeley) 02/21/93";*/
static char yyrcsid[] = "$Id: skeleton.c,v 1.4 1993/12/21 18:45:32 jtc Exp $";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 89 "calculator.y"
#include "config.h"
#ifndef DIGITAL
 #include<stdio.h>
 #include<string.h>
 #include<stdlib.h> 
 #include<math.h>
#endif
#include "calculator.h"
#include "xmtnimage.h"

void addfunc(char *name, double(*func)(double));
void addfunc2(char *name, double(*func)(double,double));
void addfunc3(char *name, double(*func)(double,double,double));
void addfunc4(char *name, double(*func)(double,double,double,double));
void addfuncchar(char *name, double(*func)(char *));
void addfuncchar2(char *name, void(*func)(char*, char*));
double drand(double a); 
void skip_to_end(void);
void skip_to_end_of_line(void);
double dmax(double a, double b);
double dmin(double a, double b);
void print_number(FILE *stream, double number);
void print_string(FILE *stream, char *string);

int input(void);
int yyinput(void);
char *string(struct symtab *sym);
#ifndef MIPS
extern int yylex(void);
#endif
void yyerror(char *s);
void yyrestart ( FILE *input_file );

extern Globals     g;
extern Image      *z;
extern int         ci;
extern char yy_hold_char, yy_n_chars;
extern int ii,rr,gg,bb; 
extern char *text;
extern char *yytext;
extern int column;      /* where the error is */

extern char *yy_current_buffer;
extern int yy_init;     /* whether we need to initialize */
extern int yy_start;    /* start state number */
extern int status;
extern char *yy_c_buf_p;
int if_true=0, print_count, datatype;
int rr,gg,bb,v,x,y,xstart,ystart,xend,yend,frame,bpp,ino,len;
int lineno,k,comp,invert;
char *position=0;
int fff;
FILE *fp;
void *ptr;
static char filename[FILENAMELENGTH];
static char tempstring[128];
#line 147 "calculator.y"
typedef union {  double dval;
          struct symtab *symp;
       } YYSTYPE;
#line 74 "y.tab.c"
#define NAME 257
#define NUMBER 258
#define YYSTRING 259
#define IDENTIFIER 260
#define EQ 261
#define LE 262
#define GE 263
#define PLUS_EQUALS 264
#define MINUS_EQUALS 265
#define TIMES_EQUALS 266
#define DIVIDE_EQUALS 267
#define LOGICAL_AND 268
#define LOGICAL_OR 269
#define INCREMENT 270
#define DECREMENT 271
#define IMAGE 272
#define RED 273
#define GREEN 274
#define BLUE 275
#define YYREAL 276
#define YYIMAG 277
#define YYWAVE 278
#define AREA 279
#define DENSITY 280
#define TNI_OPEN 281
#define TNI_READ 282
#define TNI_WRITE 283
#define PRINT 284
#define TNI_CLOSE 285
#define IF 286
#define THEN 287
#define ELSE 288
#define CASE 289
#define DEFAULT 290
#define SWITCH 291
#define WHILE 292
#define DO 293
#define FOR 294
#define GOTO 295
#define TNI_CONTINUE 296
#define BREAK 297
#define RETURN 298
#define UMINUS 299
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    5,    2,    6,    2,    2,
    2,    2,   10,    2,   12,    2,   13,    2,   14,    2,
   15,    2,   16,    2,   17,    2,   18,    2,    2,    2,
    2,    4,    7,    7,    7,    7,    8,    8,    8,    8,
    8,    3,    3,    9,    9,    9,    9,   11,   11,   11,
   11,   19,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,
};
short yylen[] = {                                         2,
    1,    1,    1,    2,    4,    0,    5,    0,    5,    1,
    1,    5,    0,    8,    0,    5,    0,    5,    0,    5,
    0,    5,    0,    4,    0,    4,    0,    3,    1,    4,
    1,    1,    5,    7,    6,    7,    3,    2,    2,    2,
    3,    1,    3,    3,    3,    1,    1,    3,    3,    1,
    1,    1,    3,    3,    3,    3,    2,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    1,    4,    6,    8,   10,    4,   13,   13,   13,
   13,   13,   10,   10,   10,
};
short yydefred[] = {                                      0,
    0,   71,   52,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   29,   32,    0,
    0,    1,    0,    3,   10,   11,   42,    0,    0,    0,
    0,   23,   25,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,   39,    0,   40,    0,   57,   58,   59,    0,    0,
    4,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   13,   47,    0,    0,    0,
    0,    0,    0,   37,   41,    0,   60,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
   56,   28,   43,    0,    0,    0,    0,   24,   26,    0,
    0,   77,   73,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   30,    0,    0,    0,    5,
   16,   18,   20,   22,    9,    7,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   12,   45,    0,   33,
    0,    0,    0,   74,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   51,    0,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   34,   36,   75,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   14,   49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   76,    0,    0,    0,    0,   83,
   84,   85,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,   80,   81,   82,   78,
};
short yydgoto[] = {                                      30,
   31,   32,   33,   34,  141,  140,   35,   36,  109,  153,
  196,  134,  135,  136,  137,   92,   93,   86,   37,
};
short yysindex[] = {                                     43,
  162,    0,    0,  -85,  -83,  -76,  -72,  -68,  -66,  -58,
  -48,    4,    5,    7,    0,    8,  107,    9, -210,   -8,
   -7,  -33,  443,  443,  443,   43,  443,    0,    0,  107,
 1754,    0,   12,    0,    0,    0,    0,  443,  443,  443,
  443,    0,    0,  -23,  139,  443,  443,  443,  443,  443,
  443,  443,  443, -200,  164,  443,  107, -232,  107,    2,
    0,    0,   22,    0,  586,    0,    0,    0,   75,  699,
    0,  443,  443,  443,  443,  443,  443,  443,  443,  443,
  443,  443,  443,  443,  443,    6, -210, 1754, 1754, 1754,
 1754,   10,   11,    0, 1754,   23,  486,  757,  767,  783,
  824,  840,  850,  861,  877,    0,    0, 1754,  -20,  937,
   25,   28,  107,    0,    0,  107,    0,  -29,  -29,  -29,
 1992, 1992,  572,  572,  572,  -29,  -29,  -38,  -38,    0,
    0,    0,    0,   13,   18,   21,   27,    0,    0,   30,
   31,    0,    0,  443,  -28,   -9,   15,   19,   20,   33,
   37,   38,   40,   36,  385,    0,  107,  443,   34,    0,
    0,    0,    0,    0,    0,    0,  517,  443,  443,  443,
  443,  443,  443,  443,  443,  410,    0,    0, 1754,    0,
  948,  107,  996,    0,  443, 1089, 1110, 1126, 1180, 1194,
 1206, 1251, 1267,    0, 1754,  -14,   39,    0,  107,  529,
   41,   44,   45,   46,   47,   48,   50,   51,   42,  419,
    0,    0,    0,  443,  443,  443,  443,  443,  443,  443,
  443,  443,    0,    0, 1754, 1321, 1358, 1384, 1438, 1449,
 1506, 1516, 1569, 1596,    0,   52,   53,   54,   55,    0,
    0,    0,   57,  443,  443,  443,  443,  443, 1622, 1632,
 1689, 1700, 1710,    0,    0,    0,    0,    0,
};
short yyrindex[] = {                                      0,
 1780,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   59,    0,    1,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  463,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   60,   66,   71,
   72,    0,    0,    0,   90,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -13,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1809, 1872, 1881,
  -39,   14,   -2,  178,  284, 1926, 1939,  506,  611,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -12,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -6,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -4,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                     61,
 2187,   64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -16,
};
#define YYTABLESIZE 2435
short yytable[] = {                                      24,
    2,   66,   60,   84,   66,   46,   27,   47,   85,   24,
    2,   23,   84,   83,   48,   82,   27,   85,   49,   66,
  154,   23,   50,  155,   51,   64,  209,   46,   44,  210,
   46,   44,   52,    2,   50,   68,   48,   50,   68,   48,
    2,   68,   53,   54,   55,    2,   56,   57,   59,    3,
   61,   62,   28,   66,   67,   87,   68,   67,  106,  112,
  114,   45,  168,  142,  132,  157,   24,  158,  138,  139,
  133,  161,   67,   27,  182,   24,  162,   29,   23,  163,
   58,  169,   27,  176,   28,  164,   69,   23,  165,  166,
   68,   68,   25,   71,  177,    0,    0,  211,    0,    0,
  223,    0,   25,    0,    0,  170,   67,   24,    0,  171,
  172,    0,    0,    0,   27,    0,   28,   27,   15,   23,
  111,   68,  113,  173,   17,    2,    2,  174,  175,   19,
   21,  215,   71,    0,  216,  217,  218,  219,  220,   24,
  221,  222,  244,  245,  246,  247,   27,  248,    6,    0,
    0,   23,    0,    0,    0,    0,    0,    0,    0,   25,
    0,    0,    0,    0,    0,   26,    0,    0,   25,    0,
    0,   24,    0,    0,    0,    0,  159,    0,   27,  160,
    0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,  116,
   25,   45,    0,   27,    0,    0,    0,    0,   23,    0,
    0,    0,    0,    0,    0,   69,    0,    0,   69,    0,
  180,   69,   44,   63,    2,    0,    0,    0,   66,   66,
    0,    0,   25,   63,    2,   94,   69,    0,    4,    5,
    6,    7,    8,    9,   10,  198,   11,    0,    4,    5,
    6,    7,    8,    9,   10,    0,   11,    2,    2,    0,
    0,    0,  212,    0,   25,   68,   68,    0,    0,    0,
   69,   69,    2,    2,    2,    2,    2,    2,    2,    0,
    2,   67,   67,    2,    2,    0,    2,    0,    2,   25,
   63,    2,    2,    2,    2,    2,    2,    2,    2,    1,
    2,   69,    3,    0,    0,    4,    5,    6,    7,    8,
    9,   10,    0,   11,    4,    5,    6,    7,    8,    9,
   10,   70,   11,    0,   70,   12,   13,   70,   14,    0,
   15,    1,    2,    0,   16,   17,   18,   19,   20,   21,
   22,    0,   70,    0,    0,    0,    4,    5,    6,    7,
    8,    9,   10,    0,   11,    0,    0,   12,   13,    0,
   14,    0,   15,    1,    2,    0,   16,   17,   18,   19,
   20,   21,   22,    0,    0,    0,   70,   70,    4,    5,
    6,    7,    8,    9,   10,    0,   11,    0,    0,   12,
   13,    0,   14,    0,   15,   63,    2,   96,   16,   17,
   18,   19,   20,   21,   22,    0,    0,   70,    0,    0,
    4,    5,    6,    7,    8,    9,   10,   24,   11,    0,
   63,    2,  107,    0,   27,   38,   39,   40,   41,   23,
    0,   42,   43,    0,    0,    4,    5,    6,    7,    8,
    9,   10,   24,   11,    0,   69,   69,    0,    0,   27,
    0,   24,    0,    0,   23,    0,    0,    0,   27,    0,
    0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
    0,    0,   27,    0,    0,    0,    0,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,    0,    0,   72,   72,   72,   72,   72,    0,   72,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   72,   77,   72,    0,  143,   84,   83,  144,
   82,    0,   85,    0,    0,   25,    0,    0,    0,    0,
    0,    0,    0,   54,   25,   80,   54,   81,   54,   54,
   54,   70,   70,    0,   77,   72,   72,  184,   84,   83,
  185,   82,    0,   85,   54,   54,   77,   54,   25,  213,
   84,   83,  214,   82,    0,   85,   80,    0,   81,   79,
    0,    0,    0,    0,    0,    0,   72,    0,   80,    0,
   81,    0,    0,    0,    0,    0,    0,    0,   54,   54,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   78,
   79,    0,    0,   84,   83,    0,   82,    0,   85,    0,
    0,    0,   79,   77,    0,    0,    0,   84,   83,   54,
   82,   80,   85,   81,    0,    0,    0,    0,    0,    0,
   78,   63,    2,  178,  115,   80,    0,   81,   53,    0,
    0,   53,   78,   53,   53,   53,    4,    5,    6,    7,
    8,    9,   10,    0,   11,    0,   63,    2,  194,   53,
   53,    0,   53,    0,    0,   63,    2,  224,    0,   79,
    0,    4,    5,    6,    7,    8,    9,   10,    0,   11,
    4,    5,    6,    7,    8,    9,   10,    0,   11,   63,
    2,    0,    0,   53,   53,    0,    0,    0,    0,   78,
    0,    0,    0,    0,    4,    5,    6,    7,    8,    9,
   10,    0,   11,   72,   72,   72,    0,    0,    0,    0,
   72,   72,    0,    0,   53,    0,   77,    0,    0,  117,
   84,   83,    0,   82,    0,   85,   72,   73,   74,    0,
    0,    0,    0,   75,   76,    0,    0,    0,   80,    0,
   81,    0,    0,    0,    0,    0,   54,   54,   54,    0,
    0,    0,    0,   54,   54,    0,    0,   72,   73,   74,
    0,    0,    0,    0,   75,   76,    0,    0,    0,   72,
   73,   74,   79,    0,   77,    0,   75,   76,   84,   83,
    0,   82,    0,   85,   77,    0,    0,    0,   84,   83,
    0,   82,    0,   85,    0,    0,   80,    0,   81,    0,
   77,    0,   78,    0,   84,   83,   80,   82,   81,   85,
    0,    0,   72,   73,   74,    0,    0,    0,    0,    0,
    0,    0,   80,    0,   81,    0,   72,   73,   74,  145,
   79,    0,    0,   75,   76,    0,    0,    0,    0,  146,
   79,   77,    0,    0,    0,   84,   83,    0,   82,    0,
   85,   53,   53,   53,    0,  147,   79,   77,   53,   53,
   78,   84,   83,   80,   82,   81,   85,   77,    0,    0,
   78,   84,   83,    0,   82,    0,   85,    0,   77,   80,
    0,   81,   84,   83,    0,   82,   78,   85,    0,   80,
    0,   81,    0,    0,   77,    0,  148,   79,   84,   83,
   80,   82,   81,   85,    0,    0,    0,    0,    0,    0,
    0,    0,  149,   79,    0,    0,   80,    0,   81,    0,
    0,    0,  150,   79,    0,    0,    0,   78,    0,    0,
    0,    0,    0,  151,   79,    0,    0,    0,    0,   72,
   73,   74,    0,   78,    0,    0,   75,   76,    0,  152,
   79,    0,    0,   78,   77,    0,    0,  156,   84,   83,
    0,   82,    0,   85,   78,   77,    0,    0,  197,   84,
   83,    0,   82,    0,   85,    0,   80,    0,   81,    0,
   78,    0,    0,    0,    0,    0,    0,   80,    0,   81,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
    0,    0,    0,    0,   75,   76,    0,   72,   73,   74,
   79,    0,    0,   77,   75,   76,  199,   84,   83,    0,
   82,   79,   85,   72,   73,   74,    0,    0,    0,    0,
   75,   76,    0,    0,    0,   80,    0,   81,    0,    0,
   78,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   78,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,    0,   79,
    0,   75,   76,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,    0,    0,    0,    0,   75,   76,    0,
   72,   73,   74,    0,    0,    0,    0,   75,   76,   78,
    0,   72,   73,   74,    0,    0,   77,    0,   75,   76,
   84,   83,    0,   82,    0,   85,    0,   72,   73,   74,
    0,    0,    0,    0,   75,   76,    0,   77,   80,    0,
   81,   84,   83,    0,   82,    0,   85,    0,    0,    0,
    0,    0,    0,   77,    0,    0,    0,   84,   83,   80,
   82,   81,   85,    0,    0,    0,    0,    0,    0,    0,
    0,  201,   79,    0,    0,   80,    0,   81,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
    0,    0,  202,   79,   75,   76,    0,    0,   72,   73,
   74,    0,   78,    0,    0,   75,   76,   77,  203,   79,
    0,   84,   83,    0,   82,    0,   85,    0,    0,    0,
    0,   77,    0,   78,    0,   84,   83,    0,   82,   80,
   85,   81,    0,   77,    0,    0,    0,   84,   83,   78,
   82,    0,   85,   80,    0,   81,   72,   73,   74,    0,
    0,    0,    0,   75,   76,   80,    0,   81,    0,    0,
    0,    0,  204,   79,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  205,   79,   77,    0,
    0,    0,   84,   83,    0,   82,    0,   85,  206,   79,
    0,    0,    0,   78,   77,    0,    0,    0,   84,   83,
   80,   82,   81,   85,    0,    0,    0,   78,    0,    0,
    0,    0,    0,    0,    0,    0,   80,    0,   81,   78,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  207,   79,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,   75,   76,   77,  208,
   79,  235,   84,   83,    0,   82,    0,   85,    0,    0,
   72,   73,   74,    0,   78,    0,    0,   75,   76,    0,
   80,    0,   81,    0,    0,    0,   72,   73,   74,    0,
   78,    0,    0,   75,   76,   77,    0,    0,    0,   84,
   83,    0,   82,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   79,    0,    0,   80,    0,   81,
    0,   77,    0,    0,    0,   84,   83,    0,   82,    0,
   85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   73,   74,   80,   78,   81,    0,   75,   76,    0,
  236,   79,    0,    0,   72,   73,   74,    0,    0,    0,
    0,   75,   76,    0,    0,    0,   72,   73,   74,    0,
    0,    0,    0,   75,   76,   77,  237,   79,    0,   84,
   83,   78,   82,    0,   85,    0,   77,    0,    0,    0,
   84,   83,    0,   82,    0,   85,    0,   80,    0,   81,
    0,    0,    0,    0,    0,    0,    0,   78,   80,    0,
   81,   72,   73,   74,    0,    0,    0,    0,   75,   76,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
  238,   79,    0,    0,   75,   76,    0,    0,    0,    0,
    0,  239,   79,   77,    0,    0,    0,   84,   83,    0,
   82,    0,   85,   77,    0,    0,    0,   84,   83,    0,
   82,   78,   85,    0,    0,   80,    0,   81,    0,    0,
    0,    0,   78,    0,    0,   80,    0,   81,    0,    0,
    0,   72,   73,   74,    0,    0,    0,    0,   75,   76,
    0,    0,    0,    0,    0,    0,    0,    0,  240,   79,
    0,    0,    0,    0,    0,    0,   77,    0,  241,   79,
   84,   83,    0,   82,    0,   85,    0,    0,   72,   73,
   74,    0,    0,    0,    0,   75,   76,    0,   80,   78,
   81,    0,    0,   77,    0,    0,    0,   84,   83,   78,
   82,    0,   85,    0,   72,   73,   74,    0,    0,    0,
    0,   75,   76,    0,    0,   80,    0,   81,    0,   77,
    0,  242,   79,   84,   83,    0,   82,    0,   85,   77,
    0,    0,    0,   84,   83,    0,   82,    0,   85,    0,
    0,   80,    0,   81,    0,    0,    0,    0,  243,   79,
    0,   80,   78,   81,    0,    0,    0,    0,   72,   73,
   74,    0,    0,    0,    0,   75,   76,    0,    0,   72,
   73,   74,    0,    0,  254,   79,   75,   76,    0,   78,
    0,    0,    0,    0,  255,   79,   77,    0,    0,    0,
   84,   83,    0,   82,    0,   85,    0,   77,    0,    0,
    0,   84,   83,    0,   82,   78,   85,   77,   80,    0,
   81,   84,   83,    0,   82,   78,   85,    0,    0,   80,
    0,   81,    0,    0,    0,    0,   72,   73,   74,   80,
    0,   81,    0,   75,   76,    0,   72,   73,   74,    0,
    0,  256,   79,   75,   76,    0,    0,    0,    0,    0,
    0,   77,  257,   79,    0,   84,   83,    0,   82,    0,
   85,    0,  258,   79,    0,    0,    0,    0,    0,    0,
    0,    0,   78,   80,    0,   81,    0,   72,    0,    0,
    0,   72,   72,   78,   72,    0,   72,    0,    0,   72,
   73,   74,    0,   78,    0,    0,   75,   76,   72,   72,
    0,   72,    0,    0,    0,    0,   65,   79,    0,   65,
    0,    0,   65,    0,    0,    0,   72,   73,   74,    0,
    0,    0,    0,   75,   76,    0,    0,   65,   65,    0,
   65,    0,    0,   72,    0,    0,    0,   78,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,    0,   75,
   76,    0,   72,   73,   74,    0,    0,    0,    0,   75,
   76,   65,   65,   72,    0,    0,    0,    0,    0,   63,
    0,    0,   63,    0,    0,   63,    0,    0,   64,    0,
    0,   64,    0,    0,   64,    0,    0,    0,    0,    0,
   63,   63,   65,   63,    0,    0,    0,    0,    0,   64,
   64,    0,   64,    0,    0,    0,    0,    0,    0,   72,
   73,   74,    0,    0,    0,    0,   75,   76,    0,    0,
   72,   73,   74,   61,   63,   63,   61,   75,   76,   61,
   72,   73,   74,   64,   64,    0,   62,   75,   76,   62,
    0,    0,   62,    0,   61,   61,    0,   61,    0,    0,
    0,    0,    0,    0,    0,   63,    0,   62,   62,    0,
   62,    0,    0,    0,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   73,   74,    0,   61,   61,
    0,   75,   76,    0,    0,    0,    0,    0,    0,   77,
    0,   62,   62,   84,   83,    0,   82,    0,   85,    0,
   72,   72,   72,    0,    0,    0,    0,   72,   72,   61,
    0,   80,    0,   81,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,   65,
   65,   65,    0,    0,    0,    0,   65,   65,    0,    0,
    0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   63,   63,   63,    0,    0,    0,    0,   63,
   63,   64,   64,   64,    0,    0,    0,    0,   64,   64,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,   61,    0,
    0,    0,    0,   61,   61,    0,    0,    0,    0,   62,
   62,   62,    0,    0,    0,    0,   62,   62,   65,   66,
   67,   68,    0,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   88,   89,   90,   91,    0,    0,
   95,   97,   98,   99,  100,  101,  102,  103,  104,  105,
    0,  108,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   72,   73,   74,    0,    0,    0,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  179,    0,    0,  181,  183,    0,    0,    0,    0,
    0,    0,    0,    0,  186,  187,  188,  189,  190,  191,
  192,  193,  195,    0,    0,    0,    0,    0,    0,    0,
    0,  200,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  225,    0,    0,    0,
  226,  227,  228,  229,  230,  231,  232,  233,  234,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  250,  251,  252,  253,
};
short yycheck[] = {                                      33,
    0,   41,   19,   42,   44,   91,   40,   91,   47,   33,
   10,   45,   42,   43,   91,   45,   40,   47,   91,   59,
   41,   45,   91,   44,   91,   59,   41,   41,   41,   44,
   44,   44,   91,   33,   41,   38,   41,   44,   41,   44,
   40,   44,   91,   40,   40,   45,   40,   40,   40,  260,
   59,   59,   10,   93,   41,   44,   59,   44,  259,  292,
   59,   40,   91,   41,   59,   41,   33,   40,   59,   59,
   87,   59,   59,   40,   41,   33,   59,   35,   45,   59,
   17,   91,   40,   44,   10,   59,   26,   45,   59,   59,
   93,   94,  126,   30,   59,   -1,   -1,   59,   -1,   -1,
   59,   -1,  126,   -1,   -1,   91,   93,   33,   -1,   91,
   91,   -1,   -1,   -1,   40,   -1,   10,   59,   59,   45,
   57,  124,   59,   91,   59,  125,  126,   91,   91,   59,
   59,   91,   69,   -1,   91,   91,   91,   91,   91,   33,
   91,   91,   91,   91,   91,   91,   40,   91,   59,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   33,   -1,   -1,   -1,   -1,  113,   -1,   40,  116,
   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  125,
  126,   40,   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
  157,   44,   61,  257,  258,   -1,   -1,   -1,  268,  269,
   -1,   -1,  126,  257,  258,  259,   59,   -1,  272,  273,
  274,  275,  276,  277,  278,  182,  280,   -1,  272,  273,
  274,  275,  276,  277,  278,   -1,  280,  257,  258,   -1,
   -1,   -1,  199,   -1,  126,  268,  269,   -1,   -1,   -1,
   93,   94,  272,  273,  274,  275,  276,  277,  278,   -1,
  280,  268,  269,  283,  284,   -1,  286,   -1,  288,  126,
  257,  258,  292,  293,  294,  295,  296,  297,  298,  257,
  258,  124,  260,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,   -1,  280,  272,  273,  274,  275,  276,  277,
  278,   38,  280,   -1,   41,  283,  284,   44,  286,   -1,
  288,  257,  258,   -1,  292,  293,  294,  295,  296,  297,
  298,   -1,   59,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,   -1,  280,   -1,   -1,  283,  284,   -1,
  286,   -1,  288,  257,  258,   -1,  292,  293,  294,  295,
  296,  297,  298,   -1,   -1,   -1,   93,   94,  272,  273,
  274,  275,  276,  277,  278,   -1,  280,   -1,   -1,  283,
  284,   -1,  286,   -1,  288,  257,  258,  259,  292,  293,
  294,  295,  296,  297,  298,   -1,   -1,  124,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,   33,  280,   -1,
  257,  258,  259,   -1,   40,  264,  265,  266,  267,   45,
   -1,  270,  271,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,   33,  280,   -1,  268,  269,   -1,   -1,   40,
   -1,   33,   -1,   -1,   45,   -1,   -1,   -1,   40,   -1,
   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   38,   62,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,  126,   60,   41,   62,   43,   44,
   45,  268,  269,   -1,   38,   93,   94,   41,   42,   43,
   44,   45,   -1,   47,   59,   60,   38,   62,  126,   41,
   42,   43,   44,   45,   -1,   47,   60,   -1,   62,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   94,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   94,   38,   -1,   -1,   -1,   42,   43,  124,
   45,   60,   47,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  257,  258,  259,   59,   60,   -1,   62,   38,   -1,
   -1,   41,  124,   43,   44,   45,  272,  273,  274,  275,
  276,  277,  278,   -1,  280,   -1,  257,  258,  259,   59,
   60,   -1,   62,   -1,   -1,  257,  258,  259,   -1,   94,
   -1,  272,  273,  274,  275,  276,  277,  278,   -1,  280,
  272,  273,  274,  275,  276,  277,  278,   -1,  280,  257,
  258,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,   -1,  280,  261,  262,  263,   -1,   -1,   -1,   -1,
  268,  269,   -1,   -1,  124,   -1,   38,   -1,   -1,   41,
   42,   43,   -1,   45,   -1,   47,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,   -1,  261,  262,  263,
   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,  261,
  262,  263,   94,   -1,   38,   -1,  268,  269,   42,   43,
   -1,   45,   -1,   47,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   60,   -1,   62,   -1,
   38,   -1,  124,   -1,   42,   43,   60,   45,   62,   47,
   -1,   -1,  261,  262,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,  261,  262,  263,   93,
   94,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,   93,
   94,   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,
   47,  261,  262,  263,   -1,   93,   94,   38,  268,  269,
  124,   42,   43,   60,   45,   62,   47,   38,   -1,   -1,
  124,   42,   43,   -1,   45,   -1,   47,   -1,   38,   60,
   -1,   62,   42,   43,   -1,   45,  124,   47,   -1,   60,
   -1,   62,   -1,   -1,   38,   -1,   93,   94,   42,   43,
   60,   45,   62,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,  261,
  262,  263,   -1,  124,   -1,   -1,  268,  269,   -1,   93,
   94,   -1,   -1,  124,   38,   -1,   -1,   41,   42,   43,
   -1,   45,   -1,   47,  124,   38,   -1,   -1,   41,   42,
   43,   -1,   45,   -1,   47,   -1,   60,   -1,   62,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  262,  263,
   -1,   -1,   -1,   -1,  268,  269,   -1,  261,  262,  263,
   94,   -1,   -1,   38,  268,  269,   41,   42,   43,   -1,
   45,   94,   47,  261,  262,  263,   -1,   -1,   -1,   -1,
  268,  269,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,  262,  263,   -1,   -1,   94,
   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,  124,
   -1,  261,  262,  263,   -1,   -1,   38,   -1,  268,  269,
   42,   43,   -1,   45,   -1,   47,   -1,  261,  262,  263,
   -1,   -1,   -1,   -1,  268,  269,   -1,   38,   60,   -1,
   62,   42,   43,   -1,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   -1,   42,   43,   60,
   45,   62,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  262,  263,
   -1,   -1,   93,   94,  268,  269,   -1,   -1,  261,  262,
  263,   -1,  124,   -1,   -1,  268,  269,   38,   93,   94,
   -1,   42,   43,   -1,   45,   -1,   47,   -1,   -1,   -1,
   -1,   38,   -1,  124,   -1,   42,   43,   -1,   45,   60,
   47,   62,   -1,   38,   -1,   -1,   -1,   42,   43,  124,
   45,   -1,   47,   60,   -1,   62,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   60,   -1,   62,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,   93,   94,
   -1,   -1,   -1,  124,   38,   -1,   -1,   -1,   42,   43,
   60,   45,   62,   47,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,  261,
  262,  263,   -1,   -1,   -1,   -1,  268,  269,   38,   93,
   94,   41,   42,   43,   -1,   45,   -1,   47,   -1,   -1,
  261,  262,  263,   -1,  124,   -1,   -1,  268,  269,   -1,
   60,   -1,   62,   -1,   -1,   -1,  261,  262,  263,   -1,
  124,   -1,   -1,  268,  269,   38,   -1,   -1,   -1,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   94,   -1,   -1,   60,   -1,   62,
   -1,   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  261,  262,  263,   60,  124,   62,   -1,  268,  269,   -1,
   93,   94,   -1,   -1,  261,  262,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,   -1,   -1,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   38,   93,   94,   -1,   42,
   43,  124,   45,   -1,   47,   -1,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   -1,   47,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   60,   -1,
   62,  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  262,  263,
   93,   94,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,
   -1,   93,   94,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   -1,   47,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,  124,   47,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   93,   94,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,  261,  262,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,   60,  124,
   62,   -1,   -1,   38,   -1,   -1,   -1,   42,   43,  124,
   45,   -1,   47,   -1,  261,  262,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,   -1,   60,   -1,   62,   -1,   38,
   -1,   93,   94,   42,   43,   -1,   45,   -1,   47,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   93,   94,
   -1,   60,  124,   62,   -1,   -1,   -1,   -1,  261,  262,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,  261,
  262,  263,   -1,   -1,   93,   94,  268,  269,   -1,  124,
   -1,   -1,   -1,   -1,   93,   94,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   -1,   47,   -1,   38,   -1,   -1,
   -1,   42,   43,   -1,   45,  124,   47,   38,   60,   -1,
   62,   42,   43,   -1,   45,  124,   47,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,  261,  262,  263,   60,
   -1,   62,   -1,  268,  269,   -1,  261,  262,  263,   -1,
   -1,   93,   94,  268,  269,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   93,   94,   -1,   42,   43,   -1,   45,   -1,
   47,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   60,   -1,   62,   -1,   38,   -1,   -1,
   -1,   42,   43,  124,   45,   -1,   47,   -1,   -1,  261,
  262,  263,   -1,  124,   -1,   -1,  268,  269,   59,   60,
   -1,   62,   -1,   -1,   -1,   -1,   38,   94,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,   -1,   59,   60,   -1,
   62,   -1,   -1,   94,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,  261,  262,  263,   -1,   -1,   -1,   -1,  268,
  269,   -1,  261,  262,  263,   -1,   -1,   -1,   -1,  268,
  269,   93,   94,  124,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   59,   60,  124,   62,   -1,   -1,   -1,   -1,   -1,   59,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,  261,
  262,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,
  261,  262,  263,   38,   93,   94,   41,  268,  269,   44,
  261,  262,  263,   93,   94,   -1,   38,  268,  269,   41,
   -1,   -1,   44,   -1,   59,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   59,   60,   -1,
   62,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,  262,  263,   -1,   93,   94,
   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   93,   94,   42,   43,   -1,   45,   -1,   47,   -1,
  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,  124,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,  261,
  262,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,  262,  263,   -1,   -1,   -1,   -1,  268,
  269,  261,  262,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  261,  262,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,  261,
  262,  263,   -1,   -1,   -1,   -1,  268,  269,   22,   23,
   24,   25,   -1,   27,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   38,   39,   40,   41,   -1,   -1,
   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
   -1,   55,   56,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,  262,  263,   -1,   -1,   -1,   72,   73,
   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  144,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  155,   -1,   -1,  158,  159,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  168,  169,  170,  171,  172,  173,
  174,  175,  176,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  185,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  210,   -1,   -1,   -1,
  214,  215,  216,  217,  218,  219,  220,  221,  222,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  244,  245,  246,  247,  248,
};
#define YYFINAL 30
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 299
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,"'\\n'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'!'",0,"'#'",0,0,"'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,
0,0,0,0,0,0,0,0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"NAME","NUMBER",
"YYSTRING","IDENTIFIER","EQ","LE","GE","PLUS_EQUALS","MINUS_EQUALS",
"TIMES_EQUALS","DIVIDE_EQUALS","LOGICAL_AND","LOGICAL_OR","INCREMENT",
"DECREMENT","IMAGE","RED","GREEN","BLUE","YYREAL","YYIMAG","YYWAVE","AREA",
"DENSITY","TNI_OPEN","TNI_READ","TNI_WRITE","PRINT","TNI_CLOSE","IF","THEN",
"ELSE","CASE","DEFAULT","SWITCH","WHILE","DO","FOR","GOTO","TNI_CONTINUE",
"BREAK","RETURN","UMINUS",
};
char *yyrule[] = {
"$accept : statement_list",
"statement_list : statement",
"statement_list : identifier_list",
"statement_list : comment",
"statement_list : statement_list statement",
"statement_list : '{' statement_list '}' statement",
"$$1 :",
"statement : NAME '=' expression $$1 ';'",
"$$2 :",
"statement : NAME '=' YYSTRING $$2 ';'",
"statement : iteration_statement",
"statement : jump_statement",
"statement : PRINT '(' print_list ')' ';'",
"$$3 :",
"statement : TNI_WRITE '(' YYSTRING $$3 ',' write_list ')' ';'",
"$$4 :",
"statement : NAME PLUS_EQUALS expression $$4 ';'",
"$$5 :",
"statement : NAME MINUS_EQUALS expression $$5 ';'",
"$$6 :",
"statement : NAME TIMES_EQUALS expression $$6 ';'",
"$$7 :",
"statement : NAME DIVIDE_EQUALS expression $$7 ';'",
"$$8 :",
"statement : NAME INCREMENT $$8 ';'",
"$$9 :",
"statement : NAME DECREMENT $$9 ';'",
"$$10 :",
"statement : expression $$10 ';'",
"statement : '\\n'",
"statement : IF '(' expression ')'",
"statement : ELSE",
"comment : '#'",
"iteration_statement : WHILE '(' statement ')' statement",
"iteration_statement : DO statement WHILE '(' expression ')' ';'",
"iteration_statement : FOR '(' statement statement ')' statement",
"iteration_statement : FOR '(' statement statement expression ')' statement",
"jump_statement : GOTO identifier ';'",
"jump_statement : TNI_CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expression ';'",
"identifier_list : identifier",
"identifier_list : identifier_list ',' identifier",
"print_list : print_list ',' expression",
"print_list : print_list ',' YYSTRING",
"print_list : expression",
"print_list : YYSTRING",
"write_list : write_list ',' expression",
"write_list : write_list ',' YYSTRING",
"write_list : expression",
"write_list : YYSTRING",
"identifier : IDENTIFIER",
"expression : expression '+' expression",
"expression : expression '-' expression",
"expression : expression '*' expression",
"expression : expression '/' expression",
"expression : '-' expression",
"expression : '!' expression",
"expression : '~' expression",
"expression : '(' expression ')'",
"expression : expression '<' expression",
"expression : expression '>' expression",
"expression : expression LE expression",
"expression : expression GE expression",
"expression : expression EQ expression",
"expression : expression LOGICAL_AND expression",
"expression : expression LOGICAL_OR expression",
"expression : expression '&' expression",
"expression : expression '|' expression",
"expression : expression '^' expression",
"expression : NUMBER",
"expression : NAME",
"expression : NAME '(' expression ')'",
"expression : NAME '(' expression ',' expression ')'",
"expression : NAME '(' expression ',' expression ',' expression ')'",
"expression : NAME '(' expression ',' expression ',' expression ',' expression ')'",
"expression : NAME '(' YYSTRING ')'",
"expression : DENSITY '[' expression ']' '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : IMAGE '[' expression ']' '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : RED '[' expression ']' '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : GREEN '[' expression ']' '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : BLUE '[' expression ']' '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : YYREAL '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : YYIMAG '[' expression ']' '[' expression ']' '[' expression ']'",
"expression : YYWAVE '[' expression ']' '[' expression ']' '[' expression ']'",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 465 "calculator.y"


void initialize_evaluator(void)
{   
   /* 1-parameter functions - new functions can be added here */
   addfunc((char*)"abs",  fabs); 
   addfunc((char*)"acos", acos); 
   addfunc((char*)"asin", asin); 
   addfunc((char*)"atan", atan); 
   addfunc((char*)"cos",  cos); 
   addfunc((char*)"cosh", cosh); 
   addfunc((char*)"exp",  exp);
   addfunc((char*)"log",  log);
   addfunc((char*)"log10",log10);
   addfunc((char*)"rand", drand);
   addfunc((char*)"sin",  sin);
   addfunc((char*)"sinh", sinh);
   addfunc((char*)"sqrt", sqrt);
   addfunc((char*)"tan",  tan);
   addfunc((char*)"tanh", tanh);
   addfunc((char*)"erf",  erf);
   addfunc((char*)"spotsize", spot_size);
   addfunc((char*)"spotsignal", spot_signal);
   addfunc((char*)"spotx", spot_x); 
   addfunc((char*)"spoty", spot_y); 
   addfunc((char*)"pixels", pixels); 

#ifdef HAVE_ASINH
   addfunc((char*)"asinh",asinh); 
#endif
#ifdef HAVE_ACOSH
   addfunc((char*)"acosh",acosh); 
#endif
#ifdef HAVE_ATANH
   addfunc((char*)"atanh",atanh); 
#endif
#ifdef HAVE_CBRT
   addfunc((char*)"cbrt", cbrt); 
#endif

   /* 2-parameter functions - new functions can be added here */
   addfunc2((char*)"pow", pow); 
   addfunc2((char*)"min", dmin); 
   addfunc2((char*)"max", dmax); 

   /* 3-parameter functions - new functions can be added here */
   addfunc3((char*)"between", fbetween); 
   addfunc3((char*)"cdensity", cdensity); 

   /* 4-parameter functions - new functions can be added here */
   addfunc4((char*)"rdensity", rdensity); 

   /* functions with 1 string - new functions can be added here */
   addfuncchar((char*)"input", macro_double_input);

   addfuncchar2((char*)"getstring", macro_string_input);

   /* Functions that take a string as argument */
   /* To use this, change the YYSTRING entry from:
        |   YYSTRING  
                 {   len = strlen($1->name)-2;
                     strncpy(tempstring,$1->name+1,len);
                     tempstring[len]=0;
                     $$ = double_image_number(tempstring);
                 }
      to:
        |   NAME '(' YYSTRING ')' 
                 {
                    if($1-> char)
                    {   len = strlen($3->name)-2;
                        strncpy(tempstring,$3->name+1,len);
                        tempstring[len]=0;
                        $$ = ($1->funcptrchar)(tempstring);
                    }else
                    {   sprintf(tempstring, "Argument to %s is not a string\n", $1->name);
                        yyerror(tempstring);
                        $$ = 0.0;
                    }                    
     Can't have both because it causes a shift/reduce conflict.
   */
   /* addfuncchar((char*)"ino", double_image_number); */

   lineno = 0;
   yy_n_chars = 0;
}

void yyerror(char *s)
{  
   formula_error(s, text); 
   yyrestart(NULL);
}

void add_variable(char *name, double value)
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
   sp->value = value;
   sp->datatype = FLOAT;
}

/* Include a value so a number can be assoc. with string */
void add_string_variable(char *name, char *string, double value)
{
   if(string==NULL) return;
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
   sp->value = value;
   if(sp->string!=NULL) free(sp->string);
   sp->string = strdup(string);
   sp->datatype = STRING;
}

void add_pointer_variable(char *name, void *ptr)
{
   if(ptr==NULL) return;
   struct symtab *sp = symlook(name);
   sp->ptr = ptr;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
   sp->value = 0;
   sp->datatype = POINTER;
}


void addfunc(char *name, double(*func)(double))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = func;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
}

void addfunc2(char *name, double(*func)(double, double))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = func;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
}

void addfunc3(char *name, double(*func)(double, double, double))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = func;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
}

void addfunc4(char *name, double(*func)(double, double, double, double))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = func;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = NULL;
}

void addfuncchar(char *name, double(*func)(char *))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = func;
   sp->funcptrchar2 = NULL;
}

void addfuncchar2(char *name, void(*func)(char*, char*))
{
   struct symtab *sp = symlook(name);
   sp->ptr = NULL;
   sp->funcptr1 = NULL;
   sp->funcptr2 = NULL;
   sp->funcptr3 = NULL;
   sp->funcptr4 = NULL;
   sp->funcptrchar = NULL;
   sp->funcptrchar2 = func;
}



double read_variable(char *name, char *answer, int &datatype)
{
   struct symtab *sp = symlook(name);
   if(sp->datatype==STRING && answer != NULL)
   {   if(sp->string) strcpy(answer, sp->string); else answer[0]=0;
   }else
   datatype = sp->datatype;
   return sp->value;
}


void *read_ptr(char *name)
{
   struct symtab *sp = symlook(name);
   return sp->ptr;
}


struct symtab* symlook(char *s)
{
   struct symtab *sp;
   for(sp=symtab; sp< &symtab[NSYMS]; sp++)
   {  
       if(sp->name && !strcmp(sp->name, s)) return sp;  /* is it already here */
       if(!sp->name)                                    /* is it free         */
       {   sp->name = strdup(s); 
           sp->string = NULL;
           sp->datatype = NONE;
           return sp; 
       }
   }
   /* Make sure they don't know what to do */
   yyerror((char*)"Too many symbols, ask a wizard to enlarge me");
   return NULL;
}

void skip_to_end(void)
{
   while(strchr("\n ",yy_hold_char)!=NULL) yyinput(); 
   int got_left_brace = yy_hold_char=='{';
   if(got_left_brace)
   {   while(yy_hold_char != '}')
       {    yyinput();
            if(yy_hold_char==0) break;
       }
   }else
   {   while(strchr(";}\n",yy_hold_char)==NULL) yyinput(); 
   }
   yyinput();
   while(yy_hold_char=='\n') yyinput(); 
}

void skip_to_end_of_line(void)
{
   while(yy_hold_char != '\n' && yy_hold_char) yyinput(); 
   yyinput();
}

double dmax(double a, double b){ if(a>b) return a; return b; }
double dmin(double a, double b){ if(a<b) return a; return b; }
double drand(double a){ a=a; return rand()/(double)RAND_MAX; }

char *string(struct symtab *sym)
{
   static char sss[FILENAMELENGTH];
   len = strlen(sym->name)-2;
   strncpy(sss, sym->name+1, len);
   sss[len]=0;
   return sss;
}

void print_number(FILE *stream, double number) 
{
   fprintf(stream, "%g",number); 
   fflush(stream);
}

void print_string(FILE *stream, char *string)
{
   int j,k;
   char *s;
   int len = strlen(string);
   j=0;
   s = (char*) malloc(16384);
   for(k=0; k<len; k++) 
   {   if(k<len-1 && string[k]=='\\') switch(string[++k])
       {   case '0': s[j++] = '\0'; break;
           case 'a': s[j++] = '\a'; break;
           case 'b': s[j++] = '\b'; break;
           case 't': s[j++] = '\t'; break;
           case 'n': s[j++] = '\n'; break;
           case 'v': s[j++] = '\v'; break;
           case 'f': s[j++] = '\f'; break;
           case 'r': s[j++] = '\r'; break;
           case '\\': s[j++] = '\\'; break;
       }else s[j++] = string[k];
   }
   s[j] = 0;
   fprintf(stream, "%s",s);
   fflush(stream);
   free(s);
}
#line 1176 "y.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
#if defined(__STDC__)
yyparse(void)
#else
yyparse()
#endif
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 6:
#line 189 "calculator.y"
{    yyvsp[-2].symp->value = yyvsp[0].dval; 
                     read_variable((char*)"temp", tempstring, yyvsp[-2].symp->datatype); 
                     if(yyvsp[-2].symp->datatype == STRING)
                          add_string_variable((char*)yyvsp[-2].symp->name, (char*)tempstring, 0);
                }
break;
case 8:
#line 195 "calculator.y"
{    add_string_variable(yyvsp[-2].symp->name, string(yyvsp[0].symp), 0); 
                }
break;
case 13:
#line 201 "calculator.y"
{    strncpy(filename, string(yyvsp[0].symp), 128);  
                     ptr = read_ptr(filename);
                     fp = (FILE*)ptr;
                }
break;
case 15:
#line 205 "calculator.y"
{ yyvsp[-2].symp->value += yyvsp[0].dval; }
break;
case 17:
#line 206 "calculator.y"
{ yyvsp[-2].symp->value -= yyvsp[0].dval; }
break;
case 19:
#line 207 "calculator.y"
{ yyvsp[-2].symp->value *= yyvsp[0].dval; }
break;
case 21:
#line 209 "calculator.y"
{ if (yyvsp[0].dval == 0.0)
                              yyerror((char*)"Division by zero");
                          else
                              yyvsp[-2].symp->value /= yyvsp[0].dval;
                        }
break;
case 23:
#line 214 "calculator.y"
{ yyvsp[-1].symp->value++; }
break;
case 25:
#line 215 "calculator.y"
{ yyvsp[-1].symp->value--; }
break;
case 27:
#line 216 "calculator.y"
{ add_variable((char*)"temp", yyvsp[0].dval); }
break;
case 30:
#line 219 "calculator.y"
{
                   if( yyvsp[-1].dval == 1)  if_true=1;                               
                   else        {  if_true=0;
                                  skip_to_end();
                               }
                }
break;
case 31:
#line 226 "calculator.y"
{  
                   if(if_true) skip_to_end(); 
                }
break;
case 32:
#line 232 "calculator.y"
{ skip_to_end_of_line(); }
break;
case 44:
#line 258 "calculator.y"
{ print_number(stdout, yyvsp[0].dval); }
break;
case 45:
#line 259 "calculator.y"
{ print_string(stdout, string(yyvsp[0].symp)); }
break;
case 46:
#line 260 "calculator.y"
{ print_number(stdout, yyvsp[0].dval); }
break;
case 47:
#line 261 "calculator.y"
{ print_string(stdout, string(yyvsp[0].symp)); }
break;
case 48:
#line 265 "calculator.y"
{ print_number(fp, yyvsp[0].dval); }
break;
case 49:
#line 266 "calculator.y"
{ print_string(fp, string(yyvsp[0].symp)); }
break;
case 50:
#line 267 "calculator.y"
{ print_number(fp, yyvsp[0].dval);  }
break;
case 51:
#line 268 "calculator.y"
{  print_string(fp, string(yyvsp[0].symp)); }
break;
case 53:
#line 276 "calculator.y"
{ yyval.dval = yyvsp[-2].dval + yyvsp[0].dval; }
break;
case 54:
#line 277 "calculator.y"
{ yyval.dval = yyvsp[-2].dval - yyvsp[0].dval; }
break;
case 55:
#line 278 "calculator.y"
{ yyval.dval = yyvsp[-2].dval * yyvsp[0].dval; }
break;
case 56:
#line 280 "calculator.y"
{ if (yyvsp[0].dval == 0.0)
                              yyerror((char*)"Division by zero");
                          else
                              yyval.dval = yyvsp[-2].dval / yyvsp[0].dval; 
                        }
break;
case 57:
#line 285 "calculator.y"
{ yyval.dval = -yyvsp[0].dval; }
break;
case 58:
#line 286 "calculator.y"
{ yyval.dval = !yyvsp[0].dval; }
break;
case 59:
#line 287 "calculator.y"
{ yyval.dval = (double)(~(int)yyvsp[0].dval); }
break;
case 60:
#line 288 "calculator.y"
{ yyval.dval = yyvsp[-1].dval; }
break;
case 61:
#line 289 "calculator.y"
{ yyval.dval = yyvsp[-2].dval < yyvsp[0].dval; }
break;
case 62:
#line 290 "calculator.y"
{ yyval.dval = yyvsp[-2].dval > yyvsp[0].dval; }
break;
case 63:
#line 291 "calculator.y"
{ yyval.dval = yyvsp[-2].dval <= yyvsp[0].dval; }
break;
case 64:
#line 292 "calculator.y"
{ yyval.dval = yyvsp[-2].dval >= yyvsp[0].dval; }
break;
case 65:
#line 293 "calculator.y"
{ yyval.dval = yyvsp[-2].dval == yyvsp[0].dval; }
break;
case 66:
#line 294 "calculator.y"
{ yyval.dval = yyvsp[-2].dval && yyvsp[0].dval; }
break;
case 67:
#line 295 "calculator.y"
{ yyval.dval = yyvsp[-2].dval || yyvsp[0].dval; }
break;
case 68:
#line 296 "calculator.y"
{ yyval.dval = (double)((int)yyvsp[-2].dval & (int)yyvsp[0].dval); }
break;
case 69:
#line 297 "calculator.y"
{ yyval.dval = (double)((int)yyvsp[-2].dval | (int)yyvsp[0].dval); }
break;
case 70:
#line 298 "calculator.y"
{ yyval.dval = (double)((int)yyvsp[-2].dval ^ (int)yyvsp[0].dval); }
break;
case 72:
#line 300 "calculator.y"
{  yyval.dval = yyvsp[0].symp->value; }
break;
case 73:
#line 302 "calculator.y"
{  
                    if(yyvsp[-3].symp->funcptr1)          /* func using a regular variable */
                        yyval.dval = (yyvsp[-3].symp->funcptr1)(yyvsp[-1].dval);
                    else
                    {   sprintf(tempstring, "%s is not a 1-argument function\n", yyvsp[-3].symp->name);
                        yyerror(tempstring);
                        yyval.dval = 0.0;
                    }
                 }
break;
case 74:
#line 312 "calculator.y"
{  
                    if(yyvsp[-5].symp->funcptr2)
                        yyval.dval = (yyvsp[-5].symp->funcptr2)(yyvsp[-3].dval,yyvsp[-1].dval);
                    else
                    {   sprintf(tempstring, "%s is not a 2-argument function\n", yyvsp[-5].symp->name);
                        yyerror(tempstring);
                        yyval.dval = 0.0;
                    }
                 }
break;
case 75:
#line 322 "calculator.y"
{  
                    if(yyvsp[-7].symp->funcptr3)
                        yyval.dval = (yyvsp[-7].symp->funcptr3)(yyvsp[-5].dval,yyvsp[-3].dval,yyvsp[-1].dval);
                    else
                    {   sprintf(tempstring, "%s is not a 3-argument function\n", yyvsp[-7].symp->name);
                        yyerror(tempstring);
                        yyval.dval = 0.0;
                    }
                 }
break;
case 76:
#line 332 "calculator.y"
{  
                    if(yyvsp[-9].symp->funcptr4)
                        yyval.dval = (yyvsp[-9].symp->funcptr4)(yyvsp[-7].dval,yyvsp[-5].dval,yyvsp[-3].dval,yyvsp[-1].dval);
                    else
                    {   sprintf(tempstring, "%s is not a 4-argument function\n", yyvsp[-9].symp->name);
                        yyerror(tempstring);
                        yyval.dval = 0.0;
                    }
                 }
break;
case 77:
#line 342 "calculator.y"
{  
                    if(yyvsp[-3].symp->funcptrchar)
                    {   yyval.dval = (yyvsp[-3].symp->funcptrchar)(string(yyvsp[-1].symp));
                        status = GOTNEW;       /* Break out of pixel loop */
                    }else if(yyvsp[-3].symp->funcptrchar2) /* func using a string variable  */
                    {   (yyvsp[-3].symp->funcptrchar2) (string(yyvsp[-1].symp), tempstring); 
                        add_string_variable((char*)"temp", tempstring, 0);
                        yyvsp[-3].symp->datatype = STRING;
                        status = GOTNEW;       /* Break out of pixel loop */
                    }else
                    {   sprintf(tempstring, "%s: error executing function\n", yyvsp[-3].symp->name);
                        yyerror(tempstring);
                        yyval.dval = 0.0;
                    }
                 }
break;
case 78:
#line 358 "calculator.y"
{    ino    = (int) yyvsp[-10].dval;
                     frame  = (int) yyvsp[-7].dval;
                     x      = (int) yyvsp[-4].dval;
                     y      = (int) yyvsp[-1].dval;
                     comp   = (int)read_variable((char*)"COMPENSATE", NULL, datatype);
                     invert = (int)read_variable((char*)"INVERT", NULL, datatype);
                     if(between(ino, 0, g.image_count) &&
                        between(frame, 0, z[ino].frames-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1))
                     { 
                        yyval.dval = pixeldensity_image(x, y, ino, frame, comp, invert); 
                     }else yyerror((char*)"Array out of bounds");
                }
break;
case 79:
#line 373 "calculator.y"
{    ino   = (int) yyvsp[-10].dval;
                     frame = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count) &&
                        between(frame, 0, z[ino].frames-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1))
                     {  bpp   = z[ino].bpp;
                        yyval.dval = (double)(pixelat(z[ino].image[frame][y] + x*g.off[bpp], bpp)); 
                     }else yyerror((char*)"Array out of bounds");
                }
break;
case 80:
#line 386 "calculator.y"
{    ino   = (int) yyvsp[-10].dval;
                     frame = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count) &&
                        between(frame, 0, z[ino].frames-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1))
                     {  bpp   = z[ino].bpp;
                        v = pixelat(z[ino].image[frame][y] + x*g.off[bpp], bpp); 
                        valuetoRGB(v,rr,gg,bb,bpp);
                        yyval.dval = (double)rr;
                     }else yyerror((char*)"Array out of bounds");
                }
break;
case 81:
#line 401 "calculator.y"
{    ino   = (int) yyvsp[-10].dval;
                     frame = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count) &&
                        between(frame, 0, z[ino].frames-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1))
                     {  bpp   = z[ino].bpp;
                        v = pixelat(z[ino].image[frame][y] + x*g.off[bpp], bpp); 
                        valuetoRGB(v,rr,gg,bb,bpp);
                        yyval.dval = (double)gg;
                     }else yyerror((char*)"Array out of bounds");
                }
break;
case 82:
#line 416 "calculator.y"
{    ino   = (int) yyvsp[-10].dval;
                     frame = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count) &&
                        between(frame, 0, z[ino].frames-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1))
                     {  bpp   = z[ino].bpp;
                        v = pixelat(z[ino].image[frame][y] + x*g.off[bpp], bpp); 
                        valuetoRGB(v,rr,gg,bb,bpp);
                        yyval.dval = (double)bb;
                     }else yyerror((char*)"Array out of bounds");
                }
break;
case 83:
#line 431 "calculator.y"
{    ino   = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1) &&
                        z[ino].floatexists)
                          yyval.dval = z[ino].fft[y][x].real();
                     else yyerror((char*)"Array out of bounds");
                }
break;
case 84:
#line 442 "calculator.y"
{    ino   = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1) &&
                        z[ino].floatexists)
                          yyval.dval = z[ino].fft[y][x].imag();
                     else yyerror((char*)"Array out of bounds");
                }
break;
case 85:
#line 453 "calculator.y"
{    ino   = (int) yyvsp[-7].dval;
                     x     = (int) yyvsp[-4].dval;
                     y     = (int) yyvsp[-1].dval;
                     if(between(ino, 0, g.image_count-1) &&
                        between(x, 0, z[ino].xsize-1) &&
                        between(y, 0, z[ino].ysize-1) &&
                        z[ino].waveletexists)
                          yyval.dval = z[ino].wavelet[y][x];
                     else yyerror((char*)"Array out of bounds");
                }
break;
#line 1688 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
